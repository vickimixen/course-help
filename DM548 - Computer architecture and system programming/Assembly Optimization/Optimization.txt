Modifying 32 bit in a register sets the rest of the register to zero,
but 16, and 8-bit modifications does not. This is less efficient than
clearing the rest of the register, however.

Write simmelar instructions next to each other
to optimize for parralization in execution units.

Jumps slows instruction fetch.
Returns are predicted by limited buffer (for branch prediction)
Put frequently used branches before rarely used branches, 
because rarely used branches are more efficient.
Function call followed by a return can be replcaed by a jump and no return.

Some instructions modify flags, and conditional instructions depend on flags,
this can be used advantagiously.
EX- jz: Jump if arithmetic operation results in zero. 

In loops, check loop condition at the end of the loop, to avoid unessesary jump
(like branching out of the loop when checking at the top, and back to the loop at the bottom)
Check if the loop should run at all before entering the loop block, as the check is now at the end of the loop body

Some calculations needs to be done in order, known as a dependency chain.
With short dependency chains, the CPU can more often
do calculations in parralel (without threads)

A loop that iterates n times, can be replaced by a loop that iterates
n/r times and do r calculations per iteration.
This can be faster if it reduces loop overhead.

Aligning data to match with of values (ex 2 for words) can speedup memory read/writes
Might not be a problem unless mixing data byte lengths.

LEA can do calculation with multible registers and constants at once,
being faster than duing them one a the time. This is also faster for multiplying constants.
"imul 5, rax" is slower than "lea (rax+4*rax), rax". The register addition looks redundant,
but makes the operation smaller (and faster I think)
Syntax of address calculation: A(B, C, D) = B+C*D+A where B and C are
registers, and D and A are constants. Note that no $ is needed before constants.

Use MOVZ if you want to clear an array and then copy into it, rather than
first doing XOR %Rx, %Rx. 

Group reads and writes to memory for speedup.



Using instruction that use different execution units can
parralelize your program. This is very model specific though.



Using MMX, XMM, and YMM registers for ints (vector registers)

Conditional move (cmov). Often inefficient

ADD, ADC, SUB, SBB, AND, OR, XOR, CMP, TEST all take up less space 
when using the accumilator as only register
XCHG forces syncronization with other cores, and is therefore slower, but the instruction takes up less space than mov.



